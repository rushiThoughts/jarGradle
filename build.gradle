apply plugin: 'application'
apply plugin: 'groovy'
//apply plugin: 'com.github.johnrengelman.shadow' // for this  Plugin with id 'com.github.johnrengelman.shadow' not found.

version = '1.0'

repositories {
    mavenCentral();
}

dependencies
        {
            implementation 'org.seleniumhq.selenium:selenium-java:3.141.59'
//        implementation 'org.codehaus.groovy:groovy-all:3.0.11'
            implementation 'junit:junit:4.12'
            implementation 'org.testng:testng:6.4'
            implementation group: 'io.github.bonigarcia', name: 'webdrivermanager', version: '5.5.3'
//            implementation files(fileTree(dir: 'lib', include: ['*.jar']),
//                    fileTree(dir: 'lib/DocxDep', include: ['*.jar']))
            implementation 'org.codehaus.groovy:groovy-all:2.3.6'
            // https://mvnrepository.com/artifact/io.github.bonigarcia/webdrivermanager
            implementation group: 'io.github.bonigarcia', name: 'webdrivermanager', version: '5.5.3'

        }

//task KAjar(type: Jar) {
//    from files(sourceSets.main.output)
//    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
//    from {
//        configurations.runtimeClasspath.collect {
//            it.isDirectory() ? it : zipTree(it)
//        }
//    }
//    with jar
//
//    sourceSets.main.groovy {
//        srcDirs = ['src']
//    }
//
//    manifest {
//        attributes 'Implementation-Title': 'KAjar',
//                'Implementation-Version': version,
//                'Main-Class': 'demo.ExecutableTest'
//    }

//task fatJar(type: Jar) {
//
//    manifest {
//        attributes 'Main-Class': "${mainClassName}"
//    }
//
//    tasks.withType(Jar){
//        duplicatesStrategy = DuplicatesStrategy.INCLUDE
//    }
//    from { configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
//    //from { configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) } setDuplicatesStrategy(DuplicatesStrategy.INCLUDE) }
//    with jar
//
//}


//jar {
//    from(sourceSets.test.output) {
//        include '**/*.groovy'
//    }
//}

//task fatJar(type: Jar) {
//    manifest.from jar.manifest
////    classifier = 'all'
//    from sourceSets.test.output
//    duplicatesStrategy = DuplicatesStrategy.INCLUDE
//    from {
//        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
//    }
//    sourceSets {
//        main {
//            groovy {
//                srcDirs = ['src/main/groovy']
//            }
//        }
//        test {
//            groovy {
//                srcDirs = ['src/test/groovy']
//            }
//        }
//    }
//    with jar
//}


//sourceSets {
//    main {
//        groovy {
//            srcDirs = ['src/main/groovy']
//        }
//    }
//    test {
//        groovy {
//            srcDirs = ['src/test/groovy']
//        }
//    }
//}

//
//task fatJar(type: Jar) {
//    sourceSets {
//        main {
//            groovy {
//                srcDirs = ['src/main/groovy']
//            }
//        }
//        test {
//            groovy {
//                srcDirs = ['src/test/groovy']
//            }
//        }
//    }
//    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
//    from {
//        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
//    }
//    with jar
//}


// {
//    from sourceSets.main.output
//    from configurations.runtimeClasspath // This is adding all the files & other jars but not the files from the test pkg
//    /*
//    META-INF/
//META-INF/MANIFEST.MF
//org/
//org/example/
//org/example/Demo.class
//org/example/Demo1.class
//org/example/LoginPage.class
//selenium-java-3.141.59.jar
//testng-6.4.jar
//junit-4.12.jar
//webdrivermanager-5.5.3.jar
//groovy-all-2.3.6.jar
//selenium-chrome-driver-3.141.59.jar
//selenium-edge-driver-3.141.59.jar
//selenium-firefox-driver-3.141.59.jar
//selenium-ie-driver-3.141.59.jar
//selenium-opera-driver-3.141.59.jar
//selenium-safari-driver-3.141.59.jar
//selenium-support-3.141.59.jar
//selenium-remote-driver-3.141.59.jar
//selenium-api-3.141.59.jar
//byte-buddy-1.8.15.jar
//commons-exec-1.3.jar
//docker-java-3.3.3.jar
//docker-java-core-3.3.3.jar
//guava-25.0-jre.jar
//okhttp-3.11.0.jar
//okio-1.14.0.jar
//hamcrest-core-1.3.jar
//bsh-2.0b4.jar
//jcommander-1.12.jar
//snakeyaml-1.6.jar
//docker-java-transport-httpclient5-3.3.3.jar
//httpclient5-5.2.1.jar
//jcl-over-slf4j-1.7.30.jar
//docker-java-api-3.3.3.jar
//slf4j-api-2.0.7.jar
//gson-2.10.1.jar
//dec-0.1.2.jar
//commons-lang3-3.13.0.jar
//jsr305-1.3.9.jar
//checker-compat-qual-2.0.0.jar
//error_prone_annotations-2.1.3.jar
//j2objc-annotations-1.1.jar
//animal-sniffer-annotations-1.14.jar
//docker-java-transport-3.3.3.jar
//jna-5.12.1.jar
//httpcore5-h2-5.2.jar
//httpcore5-5.2.jar
//commons-io-2.6.jar
//commons-compress-1.21.jar
//jackson-databind-2.10.3.jar
//bcpkix-jdk18on-1.75.jar
//jackson-annotations-2.10.3.jar
//jackson-core-2.10.3.jar
//bcutil-jdk18on-1.75.jar
//bcprov-jdk18on-1.75.jar
//     */
//}

//task customJar(type: Jar) {
//    from sourceSets.main.output
//    from configurations.runtimeClasspath
//    archiveClassifier = 'all'
//}

test{
    systemProperty 'driver.type', System.getProperty('driver.type')
}
task customFatJar(type: Jar){
    manifest{
        attributes 'Main-Class' :'demo.TestClass'
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE                             // this is including all the files from the main as well as tes pkg
    from{
        configurations.runtimeClasspath.collect{it.isDirectory() ? it :zipTree(it)} }
    with jar
    jar {
        from '.', {
            exclude '.idea', '.gradle', '*.iml', 'build', 'artifacts'       // jar block we can place this outside or inside this block both works same
            exclude("META-INF/BC1024KE.RSA", "META-INF/BC1024KE.SF", "META-INF/BC1024KE.DSA")
            exclude("META-INF/BC2048KE.RSA", "META-INF/BC2048KE.SF", "META-INF/BC2048KE.DSA") //BC2048KE.DSA
        }
    }
}

compileGroovy {
    sourceSets {
        main {
            groovy {
                srcDirs = ['src/main/groovy', 'src/test/groovy'] // Will compile all files & .class files will be generated => to compile hit gradle compileGroovy
            }
        }
    }
}

test {
    useJUnitPlatform()
}
//jar {
//    from '.', {
//        exclude '.idea', '.gradle', '*.iml', 'build', 'artifacts'
//    }
//}
